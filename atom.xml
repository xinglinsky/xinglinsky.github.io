<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>易录</title>
  
  <subtitle>Journey of a thousand miles begins with a single step.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xinglinsky.github.io/"/>
  <updated>2019-08-29T11:55:32.566Z</updated>
  <id>http://xinglinsky.github.io/</id>
  
  <author>
    <name>xinglinsky</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Windows安装SDK7.1</title>
    <link href="http://xinglinsky.github.io/2019/08/29/windows-install-sdk71/"/>
    <id>http://xinglinsky.github.io/2019/08/29/windows-install-sdk71/</id>
    <published>2019-08-29T11:46:16.000Z</published>
    <updated>2019-08-29T11:55:32.566Z</updated>
    
    <content type="html"><![CDATA[<p>Win10安装会比较麻烦，下面会特殊说明。</p><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><p>如果本地上有安装过VS2010的话，或者安装失败时，很有可能是因为运行库的版本问题。需要卸载相关组件。  </p><ul><li>Visual c++ 2010 x86 redistributable</li><li><p>Visual c++ 2010 x64 redistributable（64位windows）<br>也可以直接通过命令行来卸载（没有安装的话会提示不存在）：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">msiexec /x &#123;2F8B731A-5F2D-3EA8-8B25-C3E5E43F4BDB&#125;</div><div class="line">msiexec /x &#123;81455DEB-FC7E-3EE5-85CA-2EBDD9FD61EB&#125;</div></pre></td></tr></table></figure></li><li><p>Microsoft Visual C++ Compilers 2010 X86和X64版本<br>需要在注册表中查找是否存在，路径为HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall，<br>查找Display name为“Microsoft Visual C++ Compilers 2010 Standard-enu-x86”和“Microsoft Visual C++ Compilers 2010 Standard-enu-x64”，然后卸载。</p></li></ul><h3 id="下载、运行安装SDK7-1程序"><a href="#下载、运行安装SDK7-1程序" class="headerlink" title="下载、运行安装SDK7.1程序"></a>下载、运行安装SDK7.1程序</h3><p><a href="https://www.microsoft.com/en-us/download/details.aspx?id=17851" target="_blank" rel="external">.NET 4.0下载地址</a><br>如果本地已安装.NET4.0，可以不用安装。如果本机没有安装VS2010而且有编译的需求，那下载任意版本安装下。<br><a href="https://www.microsoft.com/en-us/download/details.aspx?id=8279" target="_blank" rel="external">SDK7.1下载地址</a><br>如果已安装.NET4.0，可能会提示.NET版本问题，直接忽略。<br><strong>Win10注意事项</strong></p><ol><li>下载操作系统对应版本的ISO文件：<br><a href="https://www.microsoft.com/en-us/download/details.aspx?id=8442" target="_blank" rel="external">ISO 镜像下载说明</a><br><a href="http://download.microsoft.com/download/F/1/0/F10113F5-B750-4969-A255-274341AC6BCE/GRMSDK_EN_DVD.iso" target="_blank" rel="external">ISO 32位下载地址</a><br><a href="http://download.microsoft.com/download/F/1/0/F10113F5-B750-4969-A255-274341AC6BCE/GRMSDKX_EN_DVD.iso" target="_blank" rel="external">ISO 64位下载地址</a></li><li>直接运行Setup\SDKSetup.exe安装。</li></ol><h3 id="修复VS2010"><a href="#修复VS2010" class="headerlink" title="修复VS2010"></a>修复VS2010</h3><p>如果有需要的话，可以重新运行VS2010安装程序或者在控制面板-&gt;程序-&gt;VS2010右击修改，选择修复并执行。</p><p><strong>不想在Win10下折腾的、折腾了还是失败的童鞋，可以选择直接安装VS2012或者VS2015（单独选择SDK）解决。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Win10安装会比较麻烦，下面会特殊说明。&lt;/p&gt;
&lt;h3 id=&quot;卸载&quot;&gt;&lt;a href=&quot;#卸载&quot; class=&quot;headerlink&quot; title=&quot;卸载&quot;&gt;&lt;/a&gt;卸载&lt;/h3&gt;&lt;p&gt;如果本地上有安装过VS2010的话，或者安装失败时，很有可能是因为运行库的版本问题
      
    
    </summary>
    
    
      <category term="编程" scheme="http://xinglinsky.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="C++" scheme="http://xinglinsky.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>论pyqt 编码的蹊跷——QTextStream、QString、string、unicode相关</title>
    <link href="http://xinglinsky.github.io/2017/01/14/encoding/"/>
    <id>http://xinglinsky.github.io/2017/01/14/encoding/</id>
    <published>2017-01-14T06:00:00.000Z</published>
    <updated>2019-08-29T11:56:46.113Z</updated>
    
    <content type="html"><![CDATA[<h4 id="环境：Pyqt4-8-32位，python2-7-3-32位"><a href="#环境：Pyqt4-8-32位，python2-7-3-32位" class="headerlink" title="环境：Pyqt4.8 32位，python2.7.3 32位"></a>环境：Pyqt4.8 32位，python2.7.3 32位</h4><p>你是不是每次看到什么字符编码、文件编码和字符串类型，都会有些懵逼呢？反正我有点，以前情况不复杂，这次遇到个坑，特此记录下。</p><ul><li>背景：<br>从<strong>qrc</strong>文件中读取某文本文件，然后解析成json，并显示在Qt控件上。该文件以<strong>utf-8</strong>编码，并保存有<strong>中文</strong>，对，就是这个中文的引出的话题,不是中文也就不复杂了……  </li><li><p>分析：</p><ol><li><p>从rcc编译的qrc文件中读取文件，也就意味着无法使用python的标准代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> open(file_path) <span class="keyword">as</span> f:</div><div class="line">content = json.load(f)</div><div class="line"><span class="keyword">print</span> content</div></pre></td></tr></table></figure><p>别无选择，只能使用QFile。</p></li><li>说到QFile，自然要用到QTextStream了。</li><li>再使用python unicode()函数将str对象解码。</li><li><p>最后使用json库loads()方法，解析成json对象。<br>基本代码是这样的：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_file</span><span class="params">(path)</span>:</span></div><div class="line"><span class="keyword">try</span>:</div><div class="line">f = QtCore.QFile(path)</div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> f.open(QtCore.QFile.ReadOnly | QtCore.QFile.Text):</div><div class="line"><span class="keyword">return</span> <span class="string">""</span></div><div class="line">ts = QtCore.QTextStream(f)</div><div class="line">tsData = ts.readAll()</div><div class="line">content = unicode(tsData, <span class="string">"utf-8"</span>, <span class="string">"ignore"</span>)</div><div class="line"><span class="keyword">return</span> json.loads(content)</div><div class="line"><span class="keyword">except</span>:</div><div class="line"><span class="keyword">import</span> traceback</div><div class="line">traceback.print_exc()</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">f.close()</div></pre></td></tr></table></figure><p>最后发现报错了……<br>ValueError: Invalid control character at: line 14 column</p></li><li>尝试将tsData先转换为utf-8编码，结果还是报错……<br>还尝试着直接使用str()等等方法，包括网上的一些技巧，比如：json.loads(content, strict=False)，都失败了……</li></ol></li><li><p>解决及总结：</p><ol><li>QTextStream在读取文本文件时，会默认使用Local的字符编码，如果不指定编码，会使后续的处理寸步难行……<br>后续有个官方链接说明了<br>For Python v2 the following conversions are done by default.<br>If Qt expects a char <em>, signed char </em> or an unsigned char <em> (or a const version) then PyQt4 will accept a unicode or QString that contains only ASCII characters, a str, a QByteArray, or a Python object that implements the buffer protocol.<br>If Qt expects a char, signed char or an unsigned char (or a const version) then PyQt4 will accept the same types as for char </em>, signed char <em> and unsigned char </em> and also require that a single character is provided.<br>If Qt expects a QString then PyQt4 will accept a unicode, a str that contains only ASCII characters, a QChar or a QByteArray.<br>If Qt expects a QByteArray then PyQt4 will accept a unicode that contains only Latin-1 characters, or a str</li><li>Unicode()在不指定encoding参数的情况下，有两种操作。如果字符串是str对象，则会调用str()，也就是使用python默认的ascci编码来解码。如果已经是Unicode对象则不会任何附加操作。<br>If no optional parameters are given, unicode() will mimic the behaviour of str() except that it returns Unicode strings instead of 8-bit strings. More precisely, if object is a Unicode string or subclass it will return that Unicode string without any additional decoding applied.<br>所以在这里，我们需要指定utf-8的编码格式，才能转化为unicode对象。<br>最后代码如下：<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@contextmanager</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_file</span><span class="params">(path)</span>:</span></div><div class="line"><span class="keyword">try</span>:</div><div class="line">f = QtCore.QFile(path)</div><div class="line"><span class="keyword">if</span> f.open(QtCore.QFile.ReadOnly | QtCore.QFile.Text):</div><div class="line">ts = QtCore.QTextStream(f)</div><div class="line">ts.setCodec(<span class="string">"utf-8"</span>)</div><div class="line">tsData = ts.readAll()</div><div class="line">content = unicode(tsData.toUtf8(), <span class="string">"utf-8"</span>, <span class="string">"ignore"</span>)</div><div class="line"><span class="keyword">yield</span> json.loads(content)</div><div class="line"><span class="keyword">else</span>:</div><div class="line"><span class="keyword">yield</span> <span class="string">""</span></div><div class="line"><span class="keyword">except</span>:</div><div class="line"><span class="keyword">import</span> traceback</div><div class="line">traceback.print_exc()</div><div class="line"><span class="keyword">yield</span> <span class="string">""</span></div><div class="line"><span class="keyword">finally</span>:</div><div class="line">f.close()</div></pre></td></tr></table></figure></li></ol></li></ul><p>有个需要注意的地方，如果要gui控件能正常显示中文，<code>content = unicode(tsData.toUtf8(), &quot;utf-8&quot;, &quot;ignore&quot;)</code>中的<strong>toUtf8()</strong>是必不可少，不然会显示为乱码。 </p><ul><li>总结：<br>一句话总结：<strong>区分什么是编码，什么是对象，Unicode是中转对象，str-&gt;unicode是解码，unicode-&gt;str是编码。</strong><br>不知在谁的blog上看到的了，很形象，很深刻……谢谢这样仁兄！</li></ul><hr><p>相关链接：<br><a href="http://pyqt.sourceforge.net/Docs/PyQt4/gotchas.html" target="_blank" rel="external">PyQt 4.12 Reference Guide</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;环境：Pyqt4-8-32位，python2-7-3-32位&quot;&gt;&lt;a href=&quot;#环境：Pyqt4-8-32位，python2-7-3-32位&quot; class=&quot;headerlink&quot; title=&quot;环境：Pyqt4.8 32位，python2.7.3 32位&quot;&gt;
      
    
    </summary>
    
      <category term="编程" scheme="http://xinglinsky.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="C++" scheme="http://xinglinsky.github.io/categories/%E7%BC%96%E7%A8%8B/C/"/>
    
    
      <category term="编码" scheme="http://xinglinsky.github.io/tags/%E7%BC%96%E7%A0%81/"/>
    
      <category term="Pyqt" scheme="http://xinglinsky.github.io/tags/Pyqt/"/>
    
  </entry>
  
</feed>
